---
layout: post
title: '소프트웨어 생명 주기(Software Life Cycle)와 생명 주기 모형의 종류 그리고 어지러운 애자일 개발 모델'
date: 2024-01-27 00:00:00 +0700 
categories: [se]
---
소프트웨어 생명 주기란 소프트웨어를 개발하기 위해 개발, 운용, 유지보수 등의 과정을 생명 주기 모형을 이용하여 각 단계별로 나눈것이다. 소프트웨어 생명 주기는 소프트웨어 개발 방법론의 바탕이 된다.

> 소프트웨어 개발 방법론: 소프트웨어 개발과 유지보수 등에 필요한 여러 가지 작업들의 수행 방법과 이러한 작업들을 좀 더 효율적으로 수행하기 위해 필요한 각종 기법 및 도구를 체계적으로 정리하여 표준화한 것

{% include pre-version.html %}

## 목차
1. 폭포수 모형(Waterfall Model)
2. 프로토타입 모형(Prototype Model)
3. 나선형 모형(Spiral Model, 점진적 모형)
4. 에자일 모형(Agile Model)

## 폭포수 모형(Waterfall Model)
폭포에서 한번 떨어진 물은 거슬러 올라갈 수 없듯이 소프트웨어 개발도 이전 단계로 돌아갈 수 없다는 전제하에 개발 단계별로 확실히 매듭짓고 승인 후 다음 단계를 진행하는 개발 방법론이다.

> 특징
* 소프트웨어 공학에서 가장 오래된 소프트웨어 생명 주기 모형
* **고전적 생명 주기 모형**이라고도 불린다.
* 개발 과정의 한 단계가 끝나야 다음 단계로 넘어갈 수 있다는 뜻의 **선형 순차적 모형**이라고도 불린다.
* 제품에 포함 될 메뉴얼 작성이 필수
* 타당성 검토 - 계획 - 요구 분석 - 설계 - 구현(코딩) - 시험(검사) - 유지보수

{% include pre-version.html %}

## 프로토타입 모형(Prototype Model)
사용자의 요구사항을 정확히 파악하기 위해 견본(시제)품을 만들어 최종 결과물을 예측하는 모형이다.

> 특징
* 시제품은 사용자와 시스템 사이의 인터페이스에 중점을 두어 개발한다.
* 프로토타입을 고객평가와 피드백으로 시스템의 일부 혹은 시스템의 모형을 만드는 과정이다.
* 요구된 소프트웨어를 구현하는데에 있어 프로토타입은 추후 구현 할 구현 단계에서 사용될 골격 코드가 된다.
* 소프트웨어의 개발이 완료된 시점에서 오류가 발견되는 폭포수 모형의 단점을 보완하기 위한 모형이다.

## 나선형 모형(Spiral Model, 점진적 모형)
보헴(Boehm)이 제안한 것으로 폭포수 모형과 프로토타입 모형의 장점에 위험 분석 기능을 추가한 모형

> 특징
* 나선을 따라 돌듯이 여러 번의 소프트웨어 개발 과정을 거쳐 점진적으로 완벽한 최종 소프트웨어를 개발하는 것으로 점진적 모형이라고도 한다.
* 소프트웨어를 개발하면서 발생할 수 있는 위험을 관리하고 최소화하는 것을 목적으로 한다.
* 점진적으로 개발 과정을 반복하기 때문에 누락되거나 추가된 요구사항을 첨가할 수 있다.

![나선형 모형](https://raw.githubusercontent.com/moony01/moony01.github.io/master/static/img/_posts/SpiralModel.png){: .wd70}

## 애자일 모형(Agile Model)
우선 애자일(Agile)의 뜻은 **민첩한**, **기만한** 이라는 의미이다. 고로 애자일 모형은 고객의 요구사항 변화에 유연하게 대응할수 있도록 일정한 주기를 반복하면서 개발과정을 진행한다. (쓰레기 같은 개발 모델이다. 대충 폭포수 모델과 정반대의 모델이라고 알고있음 될듯) 

> 특징
* 애자일 모형은 특정 개발 방법론이 아닌 그저 빠르고 낭비 없게 만들기 위해 고객과의 소통에 초점을 맞춘 방법론을 통칭한다.
* 스프린트(Sprint) 또는 이터레이션(Iteration)이라고 불리는 짧은 개발 주기를 반복하며 만들어지는 결과물에 대한 고객의 평가와 요구를 적극 수용한다.
* 소규모 프로젝트, 고도로 숙달된 개발자, 급변하는 요구사항에 적합하다.
* 애자일 모형을 기반으로 하는 소프트웨어 개발 모형에는 `스크럼(Scrum)`, `XP(eXtreme Programming)`, 칸반(Kanban), Lean, 크리스탈(Crystal), ASD(Adaptive Software Development), FDD(Feature Driven Development), DSDM(Dynamic System Development Method), DAD(Disciplined Agile Delivery) 등이 있다는데 대충 넘어가자

{% include pre-version.html %}

2001년 17명의 애자일 전문 개발자가 **애자일 SW 개발 선언문** 을 만들었다. 선언문에는 **애자일 개발 4가지 핵심 가치** 와 **애자일 개발 12가지 실행 지침** 이 있다.

### 애자일 개발 4가지 핵심 가치
1. 프로세스와 도구보다는 개인과 상호작용에 더 가치를 둔다.
2. 방대한 문서보다는 실행되는 SW에 더 가치를 둔다.
3. 계약 협상보다는 고객과 협업에 더 가치를 둔다.
4. 계획을 따르기 보다는 변화에 반응하는 것에 더 가치를 둔다.

### 애자일 개발 12가지 실행 지침
1. 유용한 소프트웨어를 빠르고 지속적으로 제공하여 고객을 만족시킨다.
2. 개발 막바지라도 요구사항 변경을 적극 수용한다.(?)
3. 몇 개월이 아닌 몇 주 단위로 실행되는 소프트웨어를 제공한다.
4. 고객과 개발자가 프로젝트 기간에 함께 일한다.
5. 개발에 대한 참여 의지가 확실한 사람들로 팀을 구성하고 필요한 개발 환경과 지원을 제공하며 일을 잘 끝낼 수 있도록 신뢰한다.
6. 같은 사무실에서 얼굴을 맞대고 의견을 나눈다.
7. 개발 진척도를 확인하는 1차 기준은 작동하는 소프트웨어이다.
8. 지속 가능한 개발을 장려하고 일정한 속도로 개발을 진행한다.
9. 기술적 우수성과 좋은 설계에 지속적인 관심을 기울이면 민첩성이 향상된다.
10. 단순화를 추구한다.
11. 최상의 아키텍처, 명확한 요구사항, 최상의 설계는 자기 스스로 일을 주도하는 조직적인 팀으로부터 나온다.
12. 더 효과적인 팀이 될 수 있는 방안을 정기적으로 깊이 고민하고 그에 따라 팀의 행동을 조정한다.