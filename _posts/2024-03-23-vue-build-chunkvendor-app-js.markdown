---
layout: post
title: 'Vue.js 빌드 과정: chunk-vendor.js와 app.js의 이해'
date: 2024-03-23 00:00:00 +0700 
categories: [vue]
---
Vue.js 프로젝트를 개발하면서, 빌드 과정이 완료된 후 생성되는 다양한 파일들을 보신 적이 있으신가요? 특히 `chunk-vendor.js`와 `app.js` 파일은 많은 개발자들이 궁금해하는 부분 중 하나입니다. 이 글에서는 이러한 파일들이 왜 생성되고, 그들의 역할은 무엇인지, 그리고 어떻게 빌드되는지에 대해 알아보겠습니다.

{% include pre-version.html %}

## 목차
1. chunk-vendor.js: 프로젝트의 외부 의존성 관리자
2. app.js: 애플리케이션의 심장
3. 빌드 설정: 최적화의 열쇠

## chunk-vendor.js: 프로젝트의 외부 의존성 관리자

`chunk-vendor.js` 파일은 Vue 프로젝트 빌드 과정에서 생성되는 중요한 파일 중 하나입니다. 이 파일의 주 역할은 프로젝트에서 사용되는 외부 라이브러리나 프레임워크를 포함하는 것입니다. 예를 들어, Vue.js 자체, Vuex, Vue Router 등의 라이브러리 코드가 이 파일에 포함됩니다. 이는 프로젝트의 'vendor' 코드, 즉 자주 변경되지 않는 외부 의존성들을 한 곳에 모아 관리함으로써 브라우저 캐싱을 효율적으로 활용할 수 있게 해줍니다. `chunk-vendor.js`는 주로 Webpack과 같은 모듈 번들러에 의해 `node_modules` 폴더 안의 의존성들을 분석하고 합쳐서 생성됩니다.

<!-- vue-chunkvendor-app -->
![chunk-vendor.js와 app.js의 이해](https://raw.githubusercontent.com/moony01/moony01.github.io/master/static/img/_posts/vue-chunkvendor-app.webp)

## app.js: 애플리케이션의 심장

반면, `app.js` 파일은 Vue 프로젝트의 핵심이라 할 수 있는 메인 JavaScript 파일입니다. 여러분의 애플리케이션 로직, 사용자 정의 코드, Vue 컴포넌트 등이 모두 이 파일에 포함됩니다. 이는 애플리케이션의 실질적인 동작을 담당하며, `chunk-vendor.js` 파일에 포함되지 않는 모든 의존성도 여기에 포함될 수 있습니다. `app.js`의 생성 역시 Webpack 같은 모듈 번들러가 여러분의 코드와 컴포넌트를 분석하고 최적화하여 한 개의 파일로 합치는 과정을 통해 이루어집니다.

## 빌드 설정: 최적화의 열쇠

이러한 파일들이 어떻게 생성되고 구성되는지는 Vue CLI 프로젝트의 `vue.config.js` 파일이나 Webpack 설정을 통해 조정할 수 있습니다. 개발자는 이 설정을 통해 코드 분할, 특정 라이브러리를 별도의 파일로 분리하는 등의 최적화 작업을 수행할 수 있습니다. 이는 최종 배포본의 성능 최적화뿐만 아니라, 개발 과정의 효율성을 높이는 데 큰 도움이 됩니다.

{% include pre-version.html %}

Vue 프로젝트의 빌드 과정은 이처럼 복잡한 과정을 거쳐 최적화된 파일을 생성합니다. 이 과정을 이해함으로써 여러분은 프로젝트의 성능을 개선하고, 더 효율적인 개발 방법을 찾을 수 있을 것입니다. Vue.js와 같은 현대적인 프론트엔드 프레임워크를 사용함에 있어 이러한 빌드 과정의 이해는 필수적인 부분이며, 애플리케이션의 성능과 개발자의 작업 효율성을 모두 높일 수 있는 중요한 열쇠가 됩니다.